<template>
  <div :class="[groupType + '-group', getTheme]">
    <label v-if="$slots.title" class="control-label">
      <slot name="title"></slot>
    </label>
    <label v-else-if="title" :for="vaId">
      <span>{{ title }}</span>
    </label>
    <div v-if="$slots.slotPrefixButton" class="input-group-btn">
      <slot name="slotPrefixButton"></slot>
      <slot name="slotPrefixDropdown"></slot>
    </div>
    <span v-if="prefixAddonText || $slots.slotPrefixAddonText" class="input-group-addon">
      {{ prefixAddonText }}
      <slot name="slotPrefixAddonText"></slot>
    </span>
    <template>
      <div v-if="isHorizontal" class="form-group">
        <label :for="vaId" class="col-sm-2 control-label">{{ title }}</label>
        <div class="col-sm-10">
          <input
            :type="type"
            :class="[formControl, getSize]"
            :id="vaId"
            :placeholder="placeholder"
            :value="currentValue"
            v-bind="$props"
            ref="input"
            @input="handleInput"
            @focus="handleFocus"
            @blur="handleBlur">
          </input>
        </div>
      </div>
      <input v-else
         :type="type"
         :class="[formControl, getSize]"
         :id="vaId"
         :placeholder="placeholder"
         :value="currentValue"
         v-bind="$props"
         ref="input"
         @input="handleInput"
         @focus="handleFocus"
         @blur="handleBlur">
      </input>
    </template>
    <span v-if="suffixAddonText || $slots.slotSuffixAddonText" class="input-group-addon">
      {{ suffixAddonText }}
      <slot name="slotSuffixAddonText"></slot>
    </span>
    <div v-if="$slots.slotSuffixButton" class="input-group-btn">
      <slot name="slotSuffixButton"></slot>
      <slot name="slotSuffixDropdown"></slot>
    </div>
    <p v-show="helpBlock" class="help-block">{{ helpBlock }}</p>
  </div>
</template>

<script>
export default {
  name: 'va-input-group',
  props: {
    isHorizontal: {
      type: Boolean,
      default: false
    },
    groupType: {
      type: String,
      default: 'form'
    },
    theme: {
      type: String
    },
    title: {
      type: String
    },
    type: {
      type: String,
      default: 'text'
    },
    vaId: {
      type: String
    },
    placeholder: {
      type: String,
      default: 'Enter Text...'
    },
    size: {
      type: String
    },
    value: {
      type: String
    },
    helpBlock: {
      type: String
    },
    prefixAddonText: {
      type: String
    },
    suffixAddonText: {
      type: String
    },
    isDisabled: {
      type: Boolean,
      default: false
    }
  },
  data () {
    return {
      currentValue: this.value
    }
  },
  computed: {
    getTheme () {
      if (!this.theme) {
        return ''
      }

      return 'has-' + this.theme
    },
    getSize () {
      if (!this.size) {
        return ''
      }

      return 'input-' + this.size
    },
    formControl () {
      return this.isFormControl ? 'form-control' : ''
    }
  },
  created () {

  },
  watch: {
    'value' (val, oldValue) {
      console.log('value', val)
      this.setCurrentValue(val)
    }
  },
  methods: {
    handleFocus () {
      this.$emit('focus', event)
    },
    handleBlur () {
      this.$emit('blur', event)
    },
    handleInput () {
      const value = event.target.value
      this.$emit('input', value)
      this.setCurrentValue(value)
      this.$emit('change', value)
    },
    handleIconClick (event) {
      if (this.onIconClick) {
        this.onIconClick(event)
      }
      this.$emit('click', event)
    },
    setCurrentValue (value) {
      if (value === this.currentValue) return
      this.currentValue = value
      console.log('@', this.currentValue)
    }
  }
}
</script>
